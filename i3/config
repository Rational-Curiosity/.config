# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!

set $Alt Mod1
set $Win Mod4
set $root focus parent;focus parent;focus parent;focus parent;focus parent

# class         border  backgr. text    indicator child_border
client.focused  #4c7899 #285577 #ffffff #fd095d   #ed095d

gaps inner 2
gaps outer 3
set $border_size 2
default_border pixel $border_size
default_floating_border pixel $border_size

# sudo apt install xfonts-terminus
set $font DejaVuSansM Nerd Font Mono
font xft:$font 9

set $master layout splitv;focus parent;layout splith
set $focused_ws i3-msg -t get_workspaces|jq '.[]|select(.focused).num'
set $focused_ws_name i3-msg -t get_workspaces|jq -r '.[]|select(.focused==true).name'
set $focused_win xprop -root _NET_ACTIVE_WINDOW|cut -d' ' -f5

# xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
# screen before suspend. Use loginctl lock-session to lock your screen.
set $lock i3lock --nofork --color=000000
exec --no-startup-id "pkill -x xss-lock && pidwait -x xss-lock;xset s 300 30;\
 xset dpms 360 360 360;[ -n \"$JOB_AT\" ] && xss-lock -l -n brightness -- $lock &"
exec --no-startup-id "pkill -x picom && pidwait -x picom; picom -b --config /dev/null --backend xrender"
exec --no-startup-id "pkill -x nm-applet && pidwait -x nm-applet; nm-applet &"
# exec --no-startup-id "pkill -x parcellite && pidwait -x parcellite; parcellite &"
# exec --no-startup-id "pkill -x greenclip && pidwait -x greenclip; greenclip daemon &"
exec --no-startup-id "pkill -x clipcatd && pidwait -x clipcatd; clipcatd"
exec_always --no-startup-id "pkill -x keynav && pidwait -x keynav; keynav"

focus_follows_mouse no
mouse_warping none

#? This help:
bindsym $Win+Control+question exec --no-startup-id rofi-shortcuts &
#? Lock screen:
bindsym $Win+Pause exec --no-startup-id $lock &
#? Snapshot:
bindsym $Win+Print exec --no-startup-id "(flameshot gui; pkill -x flameshot) &"
#? Close last notification:
bindsym $Win+ntilde exec --no-startup-id dunstctl close &
#? Close all notifications:
bindsym $Win+Shift+ntilde exec --no-startup-id dunstctl close-all &
#? Show last notification:
bindsym $Win+ccedilla exec --no-startup-id dunstctl history-pop &
bindsym $Win+Shift+ccedilla exec --no-startup-id dunstctl context &

set $rofi_args -mesg 'Submit input: C-j/C-RET'\
 -kb-accept-entry Control+m,Return,KP_Enter -kb-accept-custom\
 Control+j,Control+Return -kb-select-1 ctrl+1 -kb-select-2 ctrl+2\
 -kb-select-3 ctrl+3 -kb-select-4 ctrl+4 -kb-select-5 ctrl+5\
 -kb-select-6 ctrl+6 -kb-select-7 ctrl+7 -kb-select-8 ctrl+8\
 -kb-select-9 ctrl+9 -kb-select-10 ctrl+0 -kb-page-prev alt+p\
 -kb-page-next alt+n -kb-secondary-paste ctrl+y
#? Select transparency:
bindsym $Win+Control+t exec --no-startup-id "TRA=$(seq 1 -0.05 0.6\
 |rofi -m -1 -dmenu $rofi_args);[ -n \\"$TRA\\" ]\
 && transset --id $(printf '%d' $($focused_win)) $TRA &"
#? Select brightness:
bindsym $Win+Control+b exec --no-startup-id "BRI=$(seq 1 -0.05 0.3\
 |rofi -m -1 -dmenu $rofi_args);[ -n \\"$BRI\\" ] && brightness $BRI &"
#? Select clipboard history:
bindsym $Win+y exec --no-startup-id "clipcat-menu --preview-length\
 $(i3-msg -t get_outputs|jq \\".[]|select(.current_workspace==$(i3-msg\
 -t get_workspaces|jq '.[]|select(.focused==true).name')).rect.width/10|round-5\\") &"
# bindsym $Win+y exec --no-startup-id "rofi -m -1 -multi-select\
#  -modi 'gc:greenclip print' -show gc -run-command '{cmd}'\
#  -theme-str 'element{children:[element-text];}listview{columns:1;}window{fullscreen:true;}'\
#  $rofi_args &"
bindsym $Win+$Alt+y exec --no-startup-id "O=\\"$(dunstctl history\
 |jq '.data|.[0]|.[].message.data'\
 |rofi -m -1 -multi-select -dmenu\
 -theme-str\
 'element{children:[element-text];}listview{columns:1;}window{fullscreen:true;}'\
 $rofi_args)\\"; [ -n \\"$O\\" ]&&greenclip print \\"$(echo $O)\\""

# Use pactl to adjust volume in PulseAudio.
# set $refresh_i3status killall -SIGUSR1 i3status
# bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status &
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% &
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% &
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle &
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle &

bindsym $Win+Control+Prior exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +1% &
bindsym $Win+Control+Next exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -1% &
bindsym $Win+Prior exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5% &
bindsym $Win+Next exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -5% &
bindsym $Win+Shift+Prior exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% &
bindsym $Win+Shift+Next exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% &

# Use Mouse+$Win to drag floating windows to their wanted position
floating_modifier $Win

# [
#? Terminal with tmux
bindsym $Win+Return exec exec st -f "$font:size=$(font-size $font)" tmux
# <xor>
# bindsym $Win+Return exec alacritty msg create-window || alacritty &
# ]
# [
#? Terminal with tmux restoring last session
bindsym $Win+$Alt+Return exec exec st -f "$font:size=$(font-size $font)" tmux a
bindsym $Win+Shift+Return layout splitv;$root;layout splith;exec exec st -f "$font:size=$(font-size $font)" tmux;resize set width 50 ppt
# <xor>
# bindsym $Win+Shift+Return $root;layout splith;exec alacritty msg create-window || alacritty &;resize set width 50 ppt
# bindsym $Win+$Alt+Return exec "alacritty msg create-window --class Alacritty,TilingFloat &"
# ]

# start emacs
bindsym $Win+i exec "emacsclient -c -n -a '' &"
bindsym $Win+Shift+i layout splitv;$root;layout splith;exec "emacsclient -c -n -a '' &";resize set width 50 ppt
bindsym $Win+Shift+o layout splitv;$root;layout splith;exec --no-startup-id "rofi -m -1 -multi-select -show run $rofi_args";resize set width 50 ppt

#? Change background:
bindsym $Win+Shift+b exec --no-startup-id "if command -v ~/bin/unsplash-feh 2>&1 >/dev/null;\
 then ~/bin/unsplash-feh;else feh --bg-scale --randomize ~/Pictures/wallpapers/*.jpg;fi &"
#? Remap keyboard:
bindsym $Win+$Alt+space exec --no-startup-id remap &
#? Show virtual keyboard:
bindsym $Win+Home exec --no-startup-id florence show &
#? Hide virtual keyboard:
bindsym $Win+End exec --no-startup-id florence hide &

#? Kill focused window:
bindsym $Win+Shift+q kill

# start dmenu (a program launcher)
bindsym $Win+r exec --no-startup-id "rofi -m -1 -multi-select -show run $rofi_args &"
bindsym $Win+Shift+r exec --no-startup-id "rofi -m -1 -multi-select -show drun $rofi_args &"
bindsym $Win+Control+r exec --no-startup-id rofi-commands &
bindsym $Win+$Alt+r exec --no-startup-id "dunstify -a Command output: \\"$(rofi -m -1 -multi-select -show run $rofi_args)\\""
#? Display DBUS_SESSION_BUS_ADDRESS
bindsym $Win+$Alt+d exec --no-startup-id "dunstify -a DBUS_SESSION_BUS_ADDRESS: '' \\"$DBUS_SESSION_BUS_ADDRESS\\n$(echo $DBUS_SESSION_BUS_ADDRESS)\\""
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $Win+d exec --no-startup-id i3-dmenu-desktop

#? Focus by letter:
bindsym $Win+o exec --no-startup-id i3-easyfocus --all --font lucidasans-18 \
 --color-unfocused-bg 000000 --color-unfocused-fg 00FF00 \
 --color-focused-bg 555555 --color-focused-fg AAAAAA

# alternatively, you can use the cursor keys:
bindsym $Win+h focus left
bindsym $Win+j focus down
bindsym $Win+k focus up
bindsym $Win+l focus right
bindsym $Win+Tab fullscreen disable; focus next sibling; fullscreen enable
bindsym $Win+Shift+Tab fullscreen disable; focus prev sibling; fullscreen enable
#? Focus by rofi
bindsym $Win+period exec rofi -m -1 -i -disable-history -sorting-method fzf \
 -show window -window-format\
 \\"<span foreground='#f193f9'>{c}</span> <span foreground='#bcfd59'>{w}</span> {t}\\"\
 -kb-select-1 ctrl+1 -kb-select-2 ctrl+2 -kb-select-3 ctrl+3\
 -kb-select-4 ctrl+4 -kb-select-5 ctrl+5 -kb-select-6 ctrl+6\
 -kb-select-7 ctrl+7 -kb-select-8 ctrl+8 -kb-select-9 ctrl+9\
 -kb-select-10 ctrl+0 -kb-page-prev alt+p -kb-page-next alt+n

#? Move window to root:
bindsym $Win+g mark tmp_mv_src;$root;layout splith;mark tmp_mv_dst\
 ;[con_mark="tmp_mv_src"] focus;move window to mark tmp_mv_dst\
 ;unmark tmp_mv_src;unmark tmp_mv_dst

set $swap_right CWS=$($focused_ws_name);\
 i3-msg -t get_outputs\
 |jq -r '.[]|\\"\\(.name):\\(.current_workspace)\\"'|grep -v :null\
 |(IFS=:; CMD=; read LSC FWS; while read SC WS;\
  do CMD=\\"${CMD}workspace number $WS;move workspace to output $LSC;\\"; LSC=$SC; done;\
  i3-msg \\"${CMD}workspace number $FWS;move workspace to output $LSC;workspace number $CWS\\")

set $swap_left CWS=$($focused_ws_name);\
 i3-msg -t get_outputs\
 |jq -r '.[]|\\"\\(.name):\\(.current_workspace)\\"'|grep -v :null\
 |(IFS=:; CMD=; read FSC LWS; while read SC WS;\
  do CMD=\\"${CMD}workspace number $LWS;move workspace to output $SC;\\"; LWS=$WS; done;\
  i3-msg \\"${CMD}workspace number $LWS;move workspace to output $FSC;workspace number $CWS\\")

#? Move workspace to left:
bindsym $Win+Control+h move workspace to output left
#? Swap workspace to right:
bindsym $Win+Control+j exec --no-startup-id "$swap_right"
#? Swap workspace to left:
bindsym $Win+Control+k exec --no-startup-id "$swap_left"
#? Move workspace to right:
bindsym $Win+Control+l move workspace to output right

# alternatively, you can use the cursor keys:
bindsym $Win+Shift+h move left
bindsym $Win+Shift+j move down
bindsym $Win+Shift+k move up
bindsym $Win+Shift+l move right

# swap two windows
#? Swap window to left:
bindsym $Win+$Alt+h mark tmp_mv_src; focus left; swap container with mark tmp_mv_src; unmark tmp_mv_src
#? Swap window to down:
bindsym $Win+$Alt+j mark tmp_mv_src; focus down; swap container with mark tmp_mv_src; unmark tmp_mv_src
#? Swap window to up:
bindsym $Win+$Alt+k mark tmp_mv_src; focus up; swap container with mark tmp_mv_src; unmark tmp_mv_src
#? Swap window to right:
bindsym $Win+$Alt+l mark tmp_mv_src; focus right; swap container with mark tmp_mv_src; unmark tmp_mv_src

# move focused window
set $edit_mode "S+ mv,C+ ws2scr,A+ size5,S+A+ size1"
mode $edit_mode {
  bindsym h focus left
  bindsym j focus down
  bindsym k focus up
  bindsym l focus right
  bindsym Shift+h move left
  bindsym Shift+j move down
  bindsym Shift+k move up
  bindsym Shift+l move right
  bindsym Control+h move workspace to output left
  bindsym Control+j exec --no-startup-id "$swap_right"
  bindsym Control+k exec --no-startup-id "$swap_left"
  bindsym Control+l move workspace to output right

  bindsym $Alt+h resize shrink width 5 px or 5 ppt
  bindsym $Alt+j resize grow height 5 px or 5 ppt
  bindsym $Alt+k resize shrink height 5 px or 5 ppt
  bindsym $Alt+l resize grow width 5 px or 5 ppt
  bindsym $Alt+Shift+h resize shrink width 1 px or 1 ppt
  bindsym $Alt+Shift+j resize grow height 1 px or 1 ppt
  bindsym $Alt+Shift+k resize shrink height 1 px or 1 ppt
  bindsym $Alt+Shift+l resize grow width 1 px or 1 ppt

  bindsym s split v
  bindsym v split h
  bindsym q layout stacking
  bindsym w layout tabbed
  bindsym e layout toggle split
  bindsym u focus parent
  bindsym d focus child
  bindsym space focus mode_toggle
  bindsym Shift+space floating toggle

  # same bindings, but for the arrow keys
  bindsym Left move left 10 ppt
  bindsym Down move down 10 ppt
  bindsym Up move up 10 ppt
  bindsym Right move right 10 ppt

  # [
  bindsym Return exec exec st -f "$font:size=$(font-size $font)" tmux
  # <xor>
  # bindsym Return exec alacritty msg create-window || alacritty &
  # ]

  bindsym $Win+m mode "default"
  bindsym Escape mode "default"
}
bindsym $Win+m mode $edit_mode

#? Split in horizontal orientation:
bindsym $Win+s split v

#? Split in vertical orientation:
bindsym $Win+v split h

#? Fullscreen:
bindsym $Win+f fullscreen toggle
#? Toggle border:
bindsym $Win+t border toggle

# Change container layout
#  layout default|tabbed|stacking|splitv|splith
#  layout toggle [split|all]
#  layout toggle [split|tabbed|stacking|splitv|splith] [split|tabbed|stacking|splitv|splith]...
bindsym $Win+q layout stacking
bindsym $Win+w layout tabbed
#? Transpose containers:
bindsym $Win+e layout toggle split

#? Toggle tiling / floating:
bindsym $Win+Shift+space floating toggle

#? Change focus between tiling / floating windows:
bindsym $Win+space focus mode_toggle

bindsym $Win+Control+q move position 1 px 1 px
bindsym $Win+Control+e move position 90 ppt 1 px
bindsym $Win+Control+s move position center
bindsym $Win+Control+z move position 1 px 90 ppt
bindsym $Win+Control+c move position 90 ppt 90 ppt

#? Focus the parent container:
bindsym $Win+u focus parent

#? Focus the child container:
bindsym $Win+d focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws01 "1"
set $ws02 "2"
set $ws03 "3"
set $ws04 "4"
set $ws05 "5"
set $ws06 "6"
set $ws07 "7"
set $ws08 "8"
set $ws09 "9"
set $ws10 "10"
set $ws11 "11"
set $ws12 "12"

# switch to workspace
bindsym $Win+1 workspace number $ws01
bindsym $Win+2 workspace number $ws02
bindsym $Win+3 workspace number $ws03
bindsym $Win+4 workspace number $ws04
bindsym $Win+5 workspace number $ws05
bindsym $Win+6 workspace number $ws06
bindsym $Win+7 workspace number $ws07
bindsym $Win+8 workspace number $ws08
bindsym $Win+9 workspace number $ws09
bindsym $Win+0 workspace number $ws10
bindsym $Win+apostrophe workspace number $ws11
bindsym $Win+exclamdown workspace number $ws12

# move focused container to workspace
bindsym $Win+Shift+1 move container to workspace number $ws01
bindsym $Win+Shift+2 move container to workspace number $ws02
bindsym $Win+Shift+3 move container to workspace number $ws03
bindsym $Win+Shift+4 move container to workspace number $ws04
bindsym $Win+Shift+5 move container to workspace number $ws05
bindsym $Win+Shift+6 move container to workspace number $ws06
bindsym $Win+Shift+7 move container to workspace number $ws07
bindsym $Win+Shift+8 move container to workspace number $ws08
bindsym $Win+Shift+9 move container to workspace number $ws09
bindsym $Win+Shift+0 move container to workspace number $ws10
bindsym $Win+Shift+apostrophe move container to workspace number $ws11
bindsym $Win+Shift+exclamdown move container to workspace number $ws12

bindsym $Win+n workspace next_on_output
bindsym $Win+p workspace prev_on_output
bindsym $Win+Shift+n move container to workspace next_on_output
bindsym $Win+Shift+p move container to workspace prev_on_output

#? Tobble bar:
bindsym $Win+Escape bar mode toggle
#? Reload the configuration:
bindsym $Win+Shift+c reload
#? Restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $Win+$Alt+c restart
# exit i3 (logs you out of your X session)
#bindsym $Win+$Alt+Escape exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"
bindsym $Win+$Alt+Escape exit
# Scratchpad
bindsym $Win+Control+Return [class="^Scratchpad$"] scratchpad show;\
 [class="^Scratchpad$"] resize set 90 ppt 90 ppt;\
 [class="^Scratchpad$"] move position center

for_window [class="^(Yad|TilingFloat|Florence|Gnome-calculator)"] floating enable
for_window [class="^(Chromium\
|Evince\
|[Ff]irefox\
|Gnome-calculator\
|Google-chrome\
|KeePass\
|Navigator\
|qBittorrent\
|Tor Browser\
|Brave-browser\
|Vivaldi-stable\
)"] exec --no-startup-id "transset --id $(printf '%d' $($focused_win)) 0.9"
for_window [class="^(Evince|Totem|Eog|Vivaldi-stable)$"] border pixel
for_window [class="^Scratchpad$"] move scratchpad
for_window [title="^Peek preview$"] resize set width 30 ppt, focus left
for_window [title="^xzoom x[0-9]"] floating enable
for_window [title="^Live Caption$"] floating enable
for_window [window_role="^pop-up$"] floating enable
for_window [instance="^Places$" class="^firefox$"] floating enable
for_window [instance=":\*$"] sticky enable
for_window [instance=":\+$"] exec --no-startup-id "W=$($focused_ws);i3-msg move container to workspace number $((W + 1))"
for_window [instance=":-$"] exec --no-startup-id "W=$($focused_ws);i3-msg move container to workspace number $((W - 1))"
for_window [instance=":n$"] move container to workspace next_on_output
for_window [instance=":p$"] move container to workspace prev_on_output
assign [instance=":1$"] 1
assign [instance=":2$"] 2
assign [instance=":3$"] 3
assign [instance=":4$"] 4
assign [instance=":5$"] 5
assign [instance=":6$"] 6
assign [instance=":7$"] 7
assign [instance=":8$"] 8
assign [instance=":9$"] 9
assign [instance=":10$"] 10
assign [instance=":11$"] 11
assign [instance=":12$"] 12

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
  position top
  mode hide
  font xft:$font, Icons 9
  colors {
    background #00000080
    separator #666666
    statusline #dddddd
    focused_workspace #0088CC #0088CC #ffffff
    active_workspace #333333 #333333 #ffffff
    inactive_workspace #333333 #333333 #888888
    urgent_workspace #2f343a #900000 #ffffff
  }
  i3bar_command i3bar --transparency
  tray_output primary
  # output primary
  # status_command i3status -c ~/.config/i3/status-$(uname -n)
  status_command exec i3status-rs ~/.config/i3/config.toml
}

exec_always --no-startup-id i3-layout
# [
exec_always --no-startup-id \
"case $(tmux ls|sed -nE 's/^(scratchpad: )[^)]+\) ?(\(attached\))?$/\1\2/p') in
 'scratchpad: (attached)') :;;
 'scratchpad: ') exec st -f \"$font:size=$(font-size $font)\" -c Scratchpad tmux a -t scratchpad;;
 *) exec st -f \"$font:size=$(font-size $font)\" -c Scratchpad tmux new -s scratchpad;;
esac &"
# <xor>
# exec_always --no-startup-id "case $(tmux ls|sed -nE 's/^(scratchpad: )[^)]+\) ?(\(attached\))?$/\1\2/p') in
#  'scratchpad: (attached)') :;;
#  'scratchpad: ') alacritty --class Scratchpad,Alacritty -e tmux a -t scratchpad;;
#  *) alacritty --class Scratchpad,Alacritty -e tmux new -s scratchpad;;
# esac &"
# ]
exec_always --no-startup-id "PID=$(pgrep -x i3bar); while [ -z $PID ];\
 do sleep 1; PID=$(pgrep -x i3bar); done;\
 kill -s STOP $PID && kill -s CONT $PID && pkill -f 'sh -c i3bar'"
